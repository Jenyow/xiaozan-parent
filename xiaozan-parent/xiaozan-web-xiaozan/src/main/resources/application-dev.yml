#开发环境
spring:
    datasource:
        
        # 使用druid数据源
        type: com.alibaba.druid.pool.DruidDataSource
        
        # 配置这个属性的意义在于，如果存在多个数据源，监控的时候 可以通过名字来区分开来。
        # 如果没有配置，将会生成一个名字， 格式是："DataSource-" + System.identityHashCode(this)
        # 另外配置此属性至少在1.0.5版本中是不起作用的，强行设置name会出错。
        name: xiaozan
        url: jdbc:mysql://localhost:3306/db_xiaozan
        username: root
        password: CFP5peaTAHiVixoYeqram5gcNR8p/EjsY5Sm0g+XFtOUvTOXV/LawLaIivNhOtyFn9TMxISaIOYR9gaL6lDgIQ==
        
        driver-class-name: com.mysql.jdbc.Driver
        
        # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
        initialSize: 5
        # 最大连接池数量
        maxActive: 20
        # 最小连接池数量
        minIdle: 5
        # 获取连接时最大等待时间，单位毫秒。
        # 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
        # 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
        maxWait: 60000
        
        # 是否缓存preparedStatement，也就是PSCache。
        # PSCache对支持游标的数据库性能提升巨大，比如说oracle。
        # 在mysql下建议关闭。
        poolPreparedStatements: false
        # 要启用PSCache，必须配置大于0，
        # 当大于0时，poolPreparedStatements自动触发修改为true。
        # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
        maxPoolPreparedStatementPerConnectionSize: -1
        
        # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
        # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
        validationQuery: select 'x'
        # 单位：秒，检测连接是否有效的超时时间。
        # 底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
        validationQueryTimeout: 15
        
        # 申请连接时执行validationQuery检测连接是否有效，
        # 做了这个配置会降低性能。
        testOnBorrow: false
        # 归还连接时执行validationQuery检测连接是否有效，
        # 做了这个配置会降低性能。
        testOnReturn: false
        # 建议配置为true，不影响性能，并且保证安全性。
        # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        testWhileIdle: true
        
        # 在Druid-1.0.27之前的版本，DruidDataSource建议使用TestWhileIdle来保证连接的有效性，但仍有很多场景需要对连接进行保活处理。
        # 在1.0.28版本之后，新加入keepAlive配置，缺省关闭。
        # 打开KeepAlive之后的效果:
        # 1)初始化连接池时会填充到minIdle数量。
        # 2)连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
        # 3)当网络断开等原因产生的由ExceptionSorter检测出来的死连接被清除后，自动补充连接到minIdle数量。
        keepAlive: true
        
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        # 有两个含义：
        # 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
        # 2) testWhileIdle的判断依据，
        timeBetweenEvictionRunsMillis: 60000
        # 连接保持空闲而不被驱逐的最长时间，单位是毫秒
        minEvictableIdleTimeMillis: 300000
        
        # 物理连接初始化的时候执行的sql
        # connectionInitSqls: 
        
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，
        # filters的别名映射配置信息保存在druid-xxx.jar!/META-INF/druid-filter.properties
        # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
        # 监控统计用的filter:stat
        # 日志用的filter:log4j
        # 防御sql注入的filter:wall
        # 密码加密的filter:config
        # 注意filters的顺序: 
        # "wall,stat"这样，拦截检测的时间不在StatFilter统计的SQL执行时间内。
        # "stat,wall"这样，拦截检测的时间在StatFilter统计的SQL执行时间内
        filters: stat,wall,slf4j,config
        
        # 类型是List<com.alibaba.druid.filter.Filter>，
        # 如果同时配置了filters和proxyFilters，是组合关系，并非替换关系
        # proxyFilters: 
        
        # 合并多个DruidDataSource的监控数据
        useGlobalDataSourceStat: true
        
        druid: 
          stat: 
            # 合并SQL
            mergeSql: true
            # 慢SQL记录
            logSlowSql: true
            slowSqlMillis: 5000
          servlet:
            # IP白名单 (没有配置或者为空，则允许所有访问)
            allow: 127.0.0.1
            # IP黑名单 (存在共同时，deny优先于allow)
            deny: 
            # 登录监控界面用户名
            loginUsername: admin
            # 登录监控界面密码 
            loginPassword: 123456
            # 是否能够重置数据
            # 在StatViewSerlvet输出的html页面中，有一个功能是Reset All，执行这个操作之后，会导致所有计数器清零，重新计数。
            resetEnable: false
          filter:
            # 忽略资源
            exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
            sessionStatMaxCount: 1000
            # session统计开关
            sessionStatEnable: true
            # 配置principalSessionName，使得druid能够知道当前的session的用户是谁
            principalSessionName: user.username
            # 配置profileEnable能够监控单个url调用的sql列表
            profileEnable: true
            
        config:
          # Properties属性配置请查看:com.alibaba.druid.filter.config.ConfigFilter
          # 设置密码加密
          decrypt: true
          decrypt.key: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAMqE4gQ3B+/vqcXD7HsfTC3Oi8YYQKdDF8YdA4+KYWkoU3oK6fcT28YUmP+TWBzBPruKcERfDXQHo8hdm5TjXu0CAwEAAQ==
      
        # 配置了timeBetweenLogStatsMillis属性（大于0）之后，就会定时输出统计信息到日志中。
        # 每次输出日志会导致清零（reset）连接池相关的计数器。
        # timeBetweenLogStatsMillis: 300000
        
        # 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开
        # 当removeAbandoned=true之后，可以在内置监控界面datasource.html中的查看ActiveConnection StackTrace属性的，可以看到未关闭连接的具体堆栈信息，
        # 从而方便查出哪些连接泄漏了。
        removeAbandoned: false
        # 单位:秒
        removeAbandonedTimeout: 1800
        # 关闭abanded连接时输出错误日志
        logAbandoned: true
        
        # statementExecutableSqlLogEnable: true
        
mybatis: 
  mapperLocations: classpath:mapper/*.xml
  typeAliasesPackage: com.xiaozan.web.xiaozan.mapper.model

